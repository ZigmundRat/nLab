name: nScope Packaging

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
defaults:
  run:
    shell: bash
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        include:
          - os: ubuntu-latest
            target_architecture: x64
            executable_path: xvfb-run out/nScope-linux-x64/nScope
            artifact_path: out/make/deb/x64/nscope_*.deb
          - os: macos-latest
            target_architecture: universal
            executable_path: out/nScope-darwin-universal/nScope.app/Contents/MacOS/nScope
            artifact_path: 'out/make/nScope Installer.dmg'
          - os: windows-latest
            target_architecture: x64
            executable_path: out/nScope-win32-x64/nScope.exe
            artifact_path: 'out/make/squirrel.windows/x64/nScope Installer.exe'
            shell: cmd
    name: ${{ matrix.target_architecture }} on ${{ matrix.os }}
    steps:
      - name: Install Rust Toolchains
        if: matrix.os == 'macos-latest'
        run: |
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin
      - name: Install libusb
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install libusb-1.0-0-dev libudev-dev
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up node
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install NPM Dependencies
        run: npm ci
      - name: Build nScope
        run: npm run build
      - name: Package
        run: npm run make -- --arch ${{ matrix.target_architecture }}
      - name: Smoke Test
        run: ${{ matrix.executable_path }}
        env:
          NSCOPE_SMOKE_TEST: 1
      - name: Archive the distributable
        uses: actions/upload-artifact@v3
        with:
          name: nScope Installers
          path: ${{ matrix.artifact_path }}
      - name: Codesign executable
        env: 
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
        if: matrix.os == 'macos-latest'
        run: |
          echo $MACOS_CERTIFICATE | base64 â€”decode > certificate.p12
          security create-keychain -p <your-password> build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p <your-password> build.keychain
          security import certificate.p12 -k build.keychain -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k <your-password> build.keychain
          /usr/bin/codesign --force -s <identity-id> ./path/to/you/app -v
