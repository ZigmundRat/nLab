name: nScope Packaging

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        include:
          - os: ubuntu-latest
            target_architecture: x64
            executable_path: xvfb-run out/nScope-linux-x64/nScope
            artifact_path: out/make/deb/x64/nscope_*.deb
          - os: macos-latest
            target_architecture: universal
            executable_path: out/nScope-darwin-universal/nScope.app/Contents/MacOS/nScope
            artifact_path: 'out/make/nScope Installer.dmg'
          - os: windows-latest
            target_architecture: x64
            executable_path: out/nScope-win32-x64/nScope.exe
            artifact_path: 'out/make/squirrel.windows/x64/nScope Installer.exe'
    name: ${{ matrix.target_architecture }} on ${{ matrix.os }}
    steps:
      - name: Install Rust Toolchains
        if: matrix.os == 'macos-latest'
        run: |
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin
      - name: Install libusb
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install libusb-1.0-0-dev libudev-dev
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up node
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install NPM Dependencies
        run: npm ci
      - name: Setup Digicert Keylocker
        if: matrix.os =='windows-latest'
        uses: digicert/ssm-code-signing@v0.0.2
      - name: Build nScope
        run: npm run build
      - name: Setup MacOS certs
        if: matrix.os == 'macos-latest'
        run: ./.github/add-osx-cert.sh
        env:
          CERTIFICATE_OSX_APPLICATION: ${{ secrets.MACOS_CERTIFICATE }}
          CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
      - name: Setup Certificate
        if: matrix.os =='windows-latest'
        run: |
          echo "${{ secrets.DIGICERT_CLIENT_CERT_FILE }}" | base64 --decode > /d/Certificate_pkcs12.p12
          echo "${{ secrets.WINDOWS_SIGNING_CERT }}" | base64 --decode > /d/certfile.crt
        shell: bash
      - name: Setup Windows Certs
        if: matrix.os =='windows-latest'
        run: |
          certutil.exe -csp "DigiCert Software Trust Manager KSP" -key -user
          smksp_registrar.exe register
          certutil.exe -csp "DigiCert Software Trust Manager KSP" -key -user
          smctl healthcheck
        env:
          SM_HOST: ${{ secrets.DIGICERT_HOST }}
          SM_API_KEY: ${{ secrets.DIGICERT_API_KEY }}
          SM_CLIENT_CERT_PASSWORD: ${{ secrets.DIGICERT_CLIENT_CERT_PASSWORD }}
          SM_CODE_SIGNING_CERT_SHA1_HASH: ${{ secrets.DIGICERT_CODE_SIGNING_CERT_SHA1_HASH }}
          SM_CLIENT_CERT_FILE: D:\\Certificate_pkcs12.p12
      - name: Package
        run: |
          npm run make -- --arch ${{ matrix.target_architecture }}
        env:
          DEBUG: "electron-packager,electron-windows-installer:main"
          MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.MACOS_NOTARIZATION_APPLE_ID }}
          MACOS_NOTARIZATION_PWD: ${{ secrets.MACOS_NOTARIZATION_PWD }}
          MACOS_NOTARIZATION_TEAM_ID: ${{ secrets.MACOS_NOTARIZATION_TEAM_ID }}
          SM_HOST: ${{ secrets.DIGICERT_HOST }}
          SM_API_KEY: ${{ secrets.DIGICERT_API_KEY }}
          SM_CLIENT_CERT_PASSWORD: ${{ secrets.DIGICERT_CLIENT_CERT_PASSWORD }}
          SM_CODE_SIGNING_CERT_SHA1_HASH: ${{ secrets.DIGICERT_CODE_SIGNING_CERT_SHA1_HASH }}
          SM_CLIENT_CERT_FILE: D:\\Certificate_pkcs12.p12
          CODE_SIGNING_CERT_FILE: D:\\certfile.crt
      - name: Diagnostics
        if: failure()
        run: |
          D:\a\nScope\nScope\node_modules\electron-winstaller\vendor\signtool.exe sign /csp "DigiCert Software Trust Manager KSP" /kc key_465178755 /f D:\\certfile.crt /tr http://timestamp.digicert.com /td SHA256 /fd SHA256 C:\Users\runneradmin\AppData\Local\SquirrelTemp\tempa\lib\net45\ffmpeg.dll
        env:
          SM_HOST: ${{ secrets.DIGICERT_HOST }}
          SM_API_KEY: ${{ secrets.DIGICERT_API_KEY }}
          SM_CLIENT_CERT_PASSWORD: ${{ secrets.DIGICERT_CLIENT_CERT_PASSWORD }}
          SM_CODE_SIGNING_CERT_SHA1_HASH: ${{ secrets.DIGICERT_CODE_SIGNING_CERT_SHA1_HASH }}
          SM_CLIENT_CERT_FILE: D:\\Certificate_pkcs12.p12
          CODE_SIGNING_CERT_FILE: D:\\certfile.crt
      - name: Smoke Test
        run: ${{ matrix.executable_path }}
        env:
          NSCOPE_SMOKE_TEST: 1
      - name: Archive the distributable
        uses: actions/upload-artifact@v3
        with:
          name: nScope Installers
          path: ${{ matrix.artifact_path }}
